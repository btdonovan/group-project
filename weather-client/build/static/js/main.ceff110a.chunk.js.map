{"version":3,"sources":["weatherbox.js","routeSelector.js","dateSelector.js","unitConverter.js","App.js","serviceWorker.js","index.js"],"names":["WeatherBox","state","forecast","location_id","date","fetch","then","response","json","setState","high","low","Object","keys","this","length","fetchForecast","props","altitude","degrees","fahrenheit","Number","high_temp","toFixed","low_temp","moon","units","feet","visibility","phase","graphic","sunrise","sunset","moonrise","moonset","timezone","moment","Date","parse","tz","format","precip","cloud_cover","startDate","className","name","src","alt","width","lat","lon","description","React","PureComponent","RouteSelector","routes","htmlFor","onChange","handleRouteChange","value","DateSelector","stops","possibleDates","dates","i","push","handleDateChange","initial","map","index","key","UnitConverter","type","handleTempChange","handleDistChange","App","route","fetchRoutes","bind","event","target","stop1","stop2","stop3","stop4","filter","stop","Boolean","undefined","_","add","Component","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ceff110a.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport moment from 'moment-timezone';\n\nclass WeatherBox extends React.PureComponent {\n  state = {\n    forecast: {}\n  }\n\n  async fetchForecast(location_id, date) {\n    await fetch(`https://yellowstone-weather.herokuapp.com:3001/getForecast/${location_id}/${date}`)\n      .then((response) => response.json())\n      .then((json) => {this.setState({forecast: json})})\n  }\n\n  render() {\n    if (!Object.keys(this.state.forecast).length) {\n      this.fetchForecast(this.props.location_id, this.props.date)\n    }\n    if (this.props.date !== this.state.forecast.date) {\n      this.fetchForecast(this.props.location_id, this.props.date)\n    }\n\n    let high\n    let low\n    let degrees = \"\\u2103\"\n    \n    if (this.props.fahrenheit) {\n      high = ((Number(this.state.forecast.high_temp) * 1.8) + 32).toFixed(1)\n      low = ((Number(this.state.forecast.low_temp) * 1.8) + 32).toFixed(1)\n      degrees = \"\\u2109\"\n    } else {\n      high = Number(this.state.forecast.high_temp)\n      low = Number(this.state.forecast.low_temp)\n    }\n    let altitude\n    let units = 'meters'\n    if (this.props.feet) {\n      altitude = this.state.forecast.altitude * 3.28084\n      altitude = altitude.toFixed(1)\n      units = 'feet'\n    } else {\n      altitude = this.state.forecast.altitude\n    }\n    let moon\n    let visibility = this.state.forecast.visibility\n    let phase = this.state.forecast.phase\n    if (phase === 0) {\n      moon = 'new_moon'\n    } else if (phase === 1) {\n      if (visibility < 15) {\n        moon = 'waxing_10'\n      } else if (visibility < 25) {\n        moon = 'waxing_20'\n      } else if (visibility < 35) {\n        moon = 'waxing_30'\n      } else {\n        moon = 'waxing_40'\n      }\n    } else if (phase === 2) {\n      moon = 'first_qtr_moon'\n    } else if (phase === 3) {\n      if (visibility < 65) {\n        moon = 'waxing_60'\n      } else if (visibility < 75) {\n        moon = 'waxing_70'\n      } else if (visibility < 85) {\n        moon = 'waxing_80'\n      } else {\n        moon = 'waxing_90'\n      }\n    } else if (phase === 4) {\n      moon = 'full_moon'\n    } else if (phase === 5) {\n      if (visibility >= 85) {\n        moon = 'waning_90'\n      } else if (visibility >= 75) {\n        moon = 'waning_80'\n      } else if (visibility >= 65) {\n        moon = 'waning_70'\n      } else {\n        moon = 'waning_60'\n      }\n    } else if (phase === 6) {\n      moon = 'third_qtr_moon'\n    } else if (phase === 7) {\n      if (visibility >= 35) {\n        moon = 'waning_40'\n      } else if (visibility >= 25) {\n        moon = 'waning_30'\n      } else if (visibility >= 15) {\n        moon = 'waning_20'\n      } else {\n        moon = 'waning_10'\n      }\n    }\n    let date = this.state.forecast.date\n    let sunrise = this.state.forecast.sunrise\n    let sunset = this.state.forecast.sunset\n    let moonrise = this.state.forecast.moonrise\n    let moonset = this.state.forecast.moonset\n    let timezone = this.state.forecast.timezone\n\n    if (date) {\n      sunrise = moment(new Date(Date.parse(sunrise))).tz(timezone)\n      sunrise = sunrise.format('h:mm A z')\n      sunset = moment(new Date(Date.parse(sunset))).tz(timezone)\n      sunset = sunset.format('h:mm A z')\n      moonrise = moment(new Date(Date.parse(moonrise))).tz(timezone)\n      moonrise = moonrise.format('h:mm A z')\n      moonset = moment(new Date(Date.parse(moonset))).tz(timezone)\n      moonset = moonset.format('h:mm A z')\n    }\n\n    let graphic\n    if (this.state.forecast.precip >= 80) {\n      graphic = 'rainy.svg'\n    } else if (this.state.forecast.precip >= 50) {\n      graphic = 'drizzle.svg'\n    } else if (this.state.forecast.cloud_cover >= 80) {\n      graphic = 'cloudy.svg'\n    } else if (this.state.forecast.cloud_cover >= 60) {\n      graphic = 'mostly_cloudy.svg'\n    } else if (this.state.forecast.cloud_cover >= 30) {\n      graphic = 'partly_cloudy.svg'\n    } else {\n      graphic = 'sunny.svg'\n    }\n    \n    if (this.props.startDate) {\n      return (\n        <div className=\"card mb-4 shadow\">\n          <div className=\"card-header text-white bg-dark\">{date} - {this.state.forecast.name}</div>\n          <div>\n            <div className=\"img-overlay-container\">\n              <img src={`/images/${graphic}`} alt={graphic} width=\"100%\"/>\n              <div className=\"card-img-overlay card-body text-white bg-dark\">\n                <div className=\"card-text\">Altitude: {altitude} {units}</div>\n                <div className=\"card-text\">Lat: {this.state.forecast.lat} Lon: {this.state.forecast.lon}</div>\n                <div className=\"card-text\">{this.state.forecast.description}</div>\n                <div className=\"card-text\">Cloud Cover: {this.state.forecast.cloud_cover}%</div>\n                <div className=\"card-text\">Chance of Rain: {this.state.forecast.precip}%</div>\n                <div className=\"card-text\">Sunrise: {sunrise}</div>\n                <div className=\"card-text\">Sunset: {sunset}</div>\n                <div className=\"card-text\">Moonrise: {moonrise}</div>\n                <div className=\"card-text\">Moonset: {moonset}</div>\n              </div>\n            </div>\n          </div>\n          {/* <div>Visibility: {this.state.forecast.visibility}</div> */}\n          <div className=\"card-footer text-white bg-dark\">High: {high}{degrees} - Low: {low}{degrees} <img className=\"float-right\" src={'/images/' + moon + '.png'} alt={moon + ' phase'} width=\"30px\" /></div>\n          \n        </div>\n      )\n    } else {\n      return (\n        <div></div>\n      )\n    }\n  }\n}\n\nexport default WeatherBox;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction RouteSelector(props) {\n  if (props.routes.length === 0) {\n    return (<div>Waiting...</div>)\n  } else {\n    return (\n      <form>\n        <label htmlFor=\"routes\">Choose a route:</label>\n        <select name=\"routes\" onChange={props.handleRouteChange}>\n          <option></option>\n          <option value={1}>{props.routes[0].name}</option>\n          <option value={2}>{props.routes[1].name}</option>\n          <option value={3}>{props.routes[2].name}</option>\n        </select>\n      </form>\n    )\n  }\n}\n\nexport default RouteSelector","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction DateSelector(props) {\n  if (props.stops === 0) {\n    return (<div>Waiting...</div>)\n  } else {\n    let possibleDates = 6\n    possibleDates = 6 - props.stops\n    let dates = []\n    for (var i = 0; i <= possibleDates; i++) {\n      dates.push(`2020-07-${11 + i}`)\n    }\n    return (\n      <form>\n        <label htmlFor=\"dates\">Choose a start date:</label>\n        <select name=\"dates\" onChange={props.handleDateChange} value=''>\n          <option>{props.initial || ''}</option>\n          {dates.map((date, index) => <option key={index} value={date}>{date}</option>)}\n        </select>\n      </form>\n    )\n  }\n}\n\nexport default DateSelector","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction UnitConverter(props) {\n\n  return (\n    <form>\n      <input type='checkbox' name='temp' onChange={props.handleTempChange} />\n      <label htmlFor='temp'>Fahrenheit</label>\n      <br />\n      <input type='checkbox' name='dist' onChange={props.handleDistChange} />\n      <label htmlFor='dist'>Feet</label>\n    </form>\n  )\n}\n\nexport default UnitConverter","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport WeatherBox from './weatherbox'\nimport RouteSelector from './routeSelector'\nimport DateSelector from './dateSelector'\nimport UnitConverter from './unitConverter'\nimport moment from 'moment-timezone';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      fahrenheit: false,\n      feet: false,\n      route: 0,\n      routes: [],\n      stops: [],\n      dates: [],   \n    }\n    this.fetchRoutes = this.fetchRoutes.bind(this)\n    this.handleRouteChange = this.handleRouteChange.bind(this)\n    this.handleDateChange = this.handleDateChange.bind(this)\n    this.handleTempChange = this.handleTempChange.bind(this)\n    this.handleDistChange = this.handleDistChange.bind(this)\n  }\n\n  async fetchRoutes() {\n    await fetch(`https://yellowstone-weather.herokuapp.com:3001/routes`)\n      .then((response) => response.json())\n      .then((json) => {this.setState({routes: json})})\n  }\n\n  handleRouteChange(event) {\n    if (event.target.value) {\n      let index = event.target.value - 1\n      let stops = [\n        this.state.routes[index].stop1,\n        this.state.routes[index].stop2,\n        this.state.routes[index].stop3,\n        this.state.routes[index].stop4\n      ]\n      stops = stops.filter(stop => Boolean(stop))\n      \n      this.setState({\n        route: event.target.value,\n        stops: stops,\n        startDate: undefined,\n      })\n    }\n  }\n\n  handleDateChange(event) {\n    \n    this.setState({\n      startDate: event.target.value,\n      dates: this.state.stops.map((_, index) => moment(event.target.value).tz('UTC').add(index, 'days').format('YYYY-MM-DD'))\n    })\n  }\n\n  handleTempChange() {\n    this.setState({fahrenheit: !this.state.fahrenheit})\n  }\n\n  handleDistChange() {\n    this.setState({feet: !this.state.feet})\n  }\n\n  render() {\n    if (this.state.routes.length === 0) {\n      this.fetchRoutes()\n    }\n    let stops = 0\n    \n    if (this.state.stops) {\n      stops = this.state.stops.length\n    }\n    \n    return (\n      <div className=\"container\">\n        <div className=\"col-md-12\">\n          <div>\n          <RouteSelector handleRouteChange={this.handleRouteChange} routes={this.state.routes}/>\n          </div>\n          <div>\n          <DateSelector handleDateChange={this.handleDateChange} stops={stops} initial={this.state.startDate} />\n          </div>\n          <div>\n          <UnitConverter handleTempChange={this.handleTempChange} handleDistChange={this.handleDistChange} />\n          </div>\n          {this.state.dates.map((date, index) => <WeatherBox key={index} location_id={this.state.stops[index]} fahrenheit={this.state.fahrenheit} feet={this.state.feet} startDate={this.state.startDate} date={date}/>)}\n        </div>\n      </div>\n    )\n  }\n}\n// {/*  */}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}